# https://docs.microsoft.com/en-us/vsts/pipelines/yaml-schema?view=vsts

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: "Release"
  Project: "$(Build.SourcesDirectory)/src/EasyConfig.SiteExtension/EasyConfig.SiteExtension.csproj"
  ProjectFolder: "$(Build.SourcesDirectory)/src/EasyConfig.SiteExtension"
  NugetFolder: "$(Build.SourcesDirectory)/src/EasyConfig.SiteExtension.NuGet"

name: $(Year:yy)$(DayOfYear)$(Rev:rr)

steps:
  - task: UseDotNet@2
    displayName: Install dotnet core SDK
    inputs:
      packageType: "sdk"
      useGlobalJson: true

  - task: DotNetCoreCLI@2
    displayName: 'Restore dotnet tools'
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'restore'

  - task: DotNetCoreCLI@2
    displayName: 'Run GitVersion'
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'run dotnet-gitversion /updateassemblyinfo AssemblyInfo.cs /ensureassemblyinfo /output buildserver /nofetch'
      workingDirectory: '$(ProjectFolder)'

  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: "restore"
      projects: "$(Project)"

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: "build"
      projects: "$(Project)"
      arguments: "--configuration $(buildConfiguration)"

  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: '$(Project)'
      arguments: '--configuration $(buildConfiguration)  --output "$(NugetFolder)/content/"'
      zipAfterPublish: false
      modifyOutputPath: false

  - task: CopyFiles@2
    displayName: Copy Files
    inputs:
      SourceFolder: '$(NugetFolder)'
      Contents: 'applicationHost.xdt'
      TargetFolder: '$(NugetFolder)/content'
      OverWrite: true

  - task: DotNetCoreCLI@2
    displayName: Pack
    inputs:
      command: 'pack'
      packagesToPack: '$(Project)'
      configuration: '$(BuildConfiguration)'
      nobuild: true
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'GitVersion.NuGetVersion'
      buildProperties: ''
      verbosityPack: 'Normal'

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)"
      artifactName: NuGet
      parallel: true